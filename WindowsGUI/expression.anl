/*

Quick Reference:

true, TRUE, True, are aliases for 1.0
false, FALSE, False, are aliase for 0.0

Multiplication and addition can be used to affect the output of a value,
where as expressions inside angled brackets '< expression >' affect the
coordinates used to generate the noise.

Angled brackets have a starting flag on the left indicating the type of
operation and what it affects. Operation is listed as the first character
and can be s - scale, r - rotate, t - translate. The second character is
what it affects, if left empty then it affects all axies, otherwise it must
be the axis to apply the operation to (x,y,z,w,u,v).

4th, 5th and 6th dimensions are w, u and v respectivly, not u, v and w as
might be expected.

Math functions such as the following are supported:
	max min abs pow
	cos sin tan acos asin atan

Simple noise functions including the following are supported:
	simpleRidgedMultifractal
	simplefBm
	simpleBillow
Basis functions inclusing the following are supported:
	valueBasis gradientBasis  simplexBasis cellularBasis
Along with severl other helpful functions:
	bias gain tiers smoothTiers blend select
	sigmoid scaleOffset radial clamp

The following functions return in corresponding input coordinate:
	x y z w u v

The following functions accept two arguments (source, spacing) and return
the slope (change in height divided by spacing) where the change in height is
between the height at the current cooridnate and the height at a new coordinate
at current coordinate + spacing along the cooresponding axis. For example,
dx provides the change in height along the x axis with a
'granualrity' of spacing
	dx dy dz dw du dv

rgba and color allow constructing color inputs.
	rgba color

Making hexes.
 hexTile hexBump

*/


SuperSimplex =
(     0.5 * simplexBasis(12345)
	+ 0.25 * <s:2>simplexBasis(12345)
	+ 0.125 * <s:pow(2,2)>simplexBasis(12345)
	+ (0.125 / pow(2,1)) * <s:pow(2,3)>simplexBasis(12345)
	+ (0.125 / pow(2,2)) * <s:pow(2,4)>simplexBasis(12345)
	+ (0.125 / pow(2,3)) * <s:pow(2,5)>simplexBasis(12345)
	+ (0.125 / pow(2,4)) * <s:pow(2,6)>simplexBasis(12345)
	+ (0.125 / pow(2,5)) * <s:pow(2,7)>simplexBasis(12345)
	+ (0.125 / pow(2,6)) * <s:pow(2,8)>simplexBasis(12345)
	+ (0.125 / pow(2,7)) * <s:pow(2,9)>simplexBasis(12345)
	+ (0.125 / pow(2,8)) * <s:pow(2,10)>simplexBasis(12345)
	+ (0.125 / pow(2,9)) * <s:pow(2,11)>simplexBasis(12345)
	+ (0.125 / pow(2,10)) * <s:pow(2,12)>simplexBasis(12345)
	+ (0.125 / pow(2,11)) * <s:pow(2,13)>simplexBasis(12345)
	+ (0.125 / pow(2,12)) * <s:pow(2,14)>simplexBasis(12345)
	+ (0.125 / pow(2,13)) * <s:pow(2,15)>simplexBasis(12345)
	+ (0.125 / pow(2,14)) * <s:pow(2,16)>simplexBasis(12345)
	+ (0.125 / pow(2,15)) * <s:pow(2,17)>simplexBasis(12345)
	+ (0.125 / pow(2,16)) * <s:pow(2,18)>simplexBasis(12345)
	+ (0.125 / pow(2,17)) * <s:pow(2,19)>simplexBasis(12345)
	+ (0.125 / pow(2,18)) * <s:pow(2,20)>simplexBasis(12345)
	+ (0.125 / pow(2,19)) * <s:pow(2,21)>simplexBasis(12345)
	+ (0.125 / pow(2,20)) * <s:pow(2,22)>simplexBasis(12345)
	+ (0.125 / pow(2,21)) * <s:pow(2,23)>simplexBasis(12345)
	+ (0.125 / pow(2,22)) * <s:pow(2,24)>simplexBasis(12345)
	+ (0.125 / pow(2,23)) * <s:pow(2,25)>simplexBasis(12345)
	+ (0.125 / pow(2,24)) * <s:pow(2,26)>simplexBasis(12345)
	+ (0.125 / pow(2,25)) * <s:pow(2,27)>simplexBasis(12345)
	+ (0.125 / pow(2,26)) * <s:pow(2,28)>simplexBasis(12345)
	+ (0.125 / pow(2,27)) * <s:pow(2,29)>simplexBasis(12345)
	+ (0.125 / pow(2,28)) * <s:pow(2,30)>simplexBasis(12345)
	+ (0.125 / pow(2,29)) * <s:pow(2,31)>simplexBasis(12345)
	+ (0.125 / pow(2,30)) * <s:pow(2,32)>simplexBasis(12345)
	+ (0.125 / pow(2,31)) * <s:pow(2,33)>simplexBasis(12345)
	+ (0.125 / pow(2,32)) * <s:pow(2,34)>simplexBasis(12345)
	+ (0.125 / pow(2,33)) * <s:pow(2,35)>simplexBasis(12345)
);


funny = gradientBasis(BLEND_NONE, 12345);
<s:10><r:90,0,0,true>funny;

harhar = <  ;

//<s:10>(0.5 * SuperSimplex +  0.5 * funny);

//simpleBillow(OP_SimplexBasis, BLEND_QUINTIC, 5, 1, 654989732, 1);
//<s:10>gradientBasis(BLEND_NONE, 123456789);
// the following 2 lines are equivialant
//1.25 + 0.75 * test;

//<r: 90>
//<s: 10>
//<sx: 5>
//<tx: 100>
